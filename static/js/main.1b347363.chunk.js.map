{"version":3,"sources":["api/open-weather-map.ts","components/Footer/Footer.tsx","components/Header/Header.tsx","components/NotFound/NotFound.tsx","components/SearchView/SearchView.tsx","components/WeatherView/WeatherView.tsx","components/ForecastView/ForecastView.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["apiToken","process","Footer","className","Header","AppBar","position","color","Toolbar","Typography","variant","NotFound","props","Card","CardContent","city","err","response","data","message","SearchView","useState","currentInput","setCurrentInput","onSubmit","e","preventDefault","setCity","InputBase","placeholder","onChange","target","value","endAdornment","Button","size","type","fontSize","WeatherView","weatherData","Grid","container","spacing","item","xs","src","weather","icon","alt","description","name","sys","country","component","main","temp","feels_like","ForecastView","fiveDayArr","forecastData","daily","slice","dots","infinite","arrows","speed","slidesToShow","slidesToScroll","responsive","breakpoint","settings","map","day","dt","Date","getDay","App","setWeather","forecast","setForecast","error","setError","errorText","setErrorText","useEffect","cityName","undefined","axios","get","then","wResult","coord","lat","lon","getForecast","fResult","catch","Container","maxWidth","Fragment","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1b347363.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst apiToken = process.env.REACT_APP_OPEN_WEATHER_TOKEN;\r\n\r\nexport function getWeather(cityName: string) {\r\n  return axios.get(\r\n    \"https://api.openweathermap.org/data/2.5/weather?q=\" +\r\n    cityName +\r\n    \"&appid=\" +\r\n    apiToken +\r\n    \"&units=metric\"\r\n  );\r\n}\r\n\r\nexport function getForecast(lat: number, lon: number) {\r\n  return axios.get(\r\n    \"https://api.openweathermap.org/data/2.5/onecall?lat=\" + lat + \"&lon=\" + lon + \"&exclude=current,minutely,hourly,alerts\" +\r\n    \"&appid=\" +\r\n    apiToken +\r\n    \"&units=metric\"\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./styles.scss\";\r\nconst Footer = () => {\r\n  return <div className=\"footer\">\r\n    Weather Assignment\r\n  </div>;\r\n};\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CloudIcon from '@material-ui/icons/Cloud';\r\nimport './styles.scss';\r\n\r\n\r\nconst Header = () => {\r\n\r\n  return (\r\n    <AppBar position=\"static\" className=\"toolbar\" color=\"transparent\">\r\n      <Toolbar>\r\n        <CloudIcon className=\"appLogo\" />\r\n        <Typography variant=\"h5\" className=\"appTitle\">\r\n          Weather App\r\n        </Typography>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { Card, CardContent } from '@material-ui/core';\r\nimport React from 'react';\r\n\r\nconst NotFound = (props: any) => {\r\n    return (\r\n        <div>\r\n            <Card>\r\n                <CardContent>\r\n                    \"{props.city}\" :  {props.err && props.err.response.data.message}\r\n                </CardContent>\r\n\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotFound;\r\n","import React, { useState } from \"react\";\r\nimport { Button, InputBase } from \"@material-ui/core\";\r\nimport PlayCircleFilledIcon from '@material-ui/icons/PlayCircleFilled';\r\nimport './styles.scss';\r\n\r\nexport default function SearchView(props: any) {\r\n\r\n  const [currentInput, setCurrentInput] = useState<string>()\r\n\r\n  const setCity = (e: any) => {\r\n    e.preventDefault();\r\n    props.setCity(currentInput)\r\n  }\r\n\r\n  return (\r\n    <form className=\"search-bar\" onSubmit={setCity}>\r\n      <InputBase\r\n        className=\"search-input\"\r\n        placeholder=\"Search…\"\r\n        onChange={e => setCurrentInput(e.target.value)}\r\n        endAdornment={\r\n          <Button variant=\"contained\" color=\"primary\" size=\"large\" className=\"search-button\" type=\"submit\">\r\n            Go <PlayCircleFilledIcon className=\"search-icon\" fontSize=\"small\" />\r\n          </Button>\r\n        }\r\n      />\r\n    </form>\r\n\r\n  );\r\n}\r\n","import { Card, CardContent, Grid, Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport './styles.scss';\r\n\r\nexport default function WeatherView(props: any) {\r\n\r\n  const { weatherData } = props;\r\n  return (\r\n    <Card className=\"weather-card\">\r\n      <CardContent>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={4}>\r\n            <img className=\"weather-icon\" src={\"http://openweathermap.org/img/wn/\" + weatherData.weather[0].icon + \"@2x.png\"} alt=\"\" />\r\n            <small className=\"weather-description\">\r\n              {weatherData.weather[0].description}\r\n            </small>\r\n          </Grid>\r\n          <Grid item xs={8}>\r\n            <h3>{weatherData.name}, {weatherData.sys.country}</h3>\r\n            <Typography component=\"h5\" variant=\"h5\">\r\n              {weatherData.main.temp}°C\r\n          </Typography>\r\n            <small>Feels Like {weatherData.main.feels_like}°C</small>\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","import { Card, CardContent } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport Slider from \"react-slick\";\r\nimport './styles.scss';\r\n\r\n\r\nexport default function ForecastView(props: any) {\r\n  const settings = {\r\n    dots: true,\r\n    infinite: false,\r\n    arrows: false,\r\n    speed: 500,\r\n    slidesToShow: 3,\r\n    slidesToScroll: 3,\r\n    responsive: [\r\n      {\r\n        breakpoint: 1280,\r\n        settings: {\r\n          slidesToShow: 1,\r\n          slidesToScroll: 1,\r\n        }\r\n      }\r\n    ]\r\n  };\r\n\r\n  function getDayFromDate(dt: number) {\r\n    const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n    let d = new Date(dt * 1000);\r\n    return days[d.getDay()];\r\n  }\r\n\r\n  let fiveDayArr = props.forecastData.daily.slice(0, 5);\r\n  return (\r\n    <div className=\"forecast-view\">\r\n      <Slider {...settings}>\r\n        {fiveDayArr.map((day: any) =>\r\n          <div key={day.dt}>\r\n            <Card key={day.dt} className=\"forecast-day-card\">\r\n              <CardContent>\r\n                <span className=\"forecast-day-temp\">{getDayFromDate(day.dt)}</span>\r\n                <img className=\"weather-icon\" src={\"http://openweathermap.org/img/wn/\" + day.weather[0].icon + \"@2x.png\"} alt=\"\" />\r\n                <small className=\"weather-description\">\r\n                  {day.weather[0].description}\r\n                </small>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        )}\r\n      </Slider>\r\n    </div>\r\n  );\r\n}\r\n","import { Container, Grid } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { getWeather, getForecast } from \"./api/open-weather-map\";\r\nimport Footer from \"./components/Footer/Footer\";\r\nimport Header from \"./components/Header/Header\";\r\nimport NotFound from \"./components/NotFound/NotFound\";\r\nimport SearchView from \"./components/SearchView/SearchView\";\r\nimport WeatherView from \"./components/WeatherView/WeatherView\";\r\nimport ForecastView from \"./components/ForecastView/ForecastView\";\r\n// import IWeather from \"./types/IWeather\";\r\n// import IForecast from \"./types/IForecast\";\r\n\r\nfunction App() {\r\n\r\n  const [city, setCity] = useState<string>();\r\n  const [weather, setWeather] = useState();\r\n  const [forecast, setForecast] = useState();\r\n  const [error, setError] = useState<boolean>(false);\r\n  const [errorText, setErrorText] = useState<string>()\r\n  useEffect(() => {\r\n\r\n    if (city !== undefined) {\r\n\r\n      getWeather(city).then((wResult: any) => {\r\n        // set states\r\n        setError(false);\r\n        setWeather(wResult.data);\r\n\r\n        // get latitude and longitude\r\n        let {lat, lon} = wResult.data.coord;\r\n        \r\n        // call forecasting API\r\n        getForecast(lat, lon).then((fResult: any) => {\r\n          setError(false);\r\n          setForecast(fResult.data);\r\n        });\r\n\r\n      }).catch((err) => {\r\n        setError(true);\r\n        setErrorText(err);\r\n      });\r\n\r\n    }\r\n  }, [city]);\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <Container maxWidth=\"md\" >\r\n        <Grid>\r\n          <SearchView setCity={setCity} />\r\n          {error && <NotFound city={city} err={errorText} />}\r\n          {!error &&\r\n            <React.Fragment>\r\n              {weather && <WeatherView weatherData={weather} />}\r\n              {forecast && <ForecastView forecastData={forecast} />}\r\n            </React.Fragment>\r\n          }\r\n        </Grid>\r\n      </Container>\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\n\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}